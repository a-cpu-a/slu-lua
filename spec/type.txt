#
# Dependencies: Lua, comptime, modules, safety, arrayConstructor
#

New Syntax {
	
	--TODO: make fn types different from fn statements, to allow use of fn statements in expressions maybe?
	
	typePrefix ::= ["mut"] {typeunop}
	
	typeunop ::= "&" [borrowLifetime] ["mut"] | "*" ("mut" | "const")
	typepostunop ::= ".*"
	
	unop @::= | typeunop | "alloc"
	postunp @::= | typepostunop
	
	borrowLifetime ::= "/" Name {"/" Name}
	
	typedParam ::= uncondDestrPat
	paramList ::= typedParam {"," typedParam}
	
	macroParam ::= ["macro"] typedParam
	
	macroParamSep ::= "," | ";"
	macroParamList ::= macroParam {macroParamSep macroParam}
	
	tupleableName ::= Name | Integral
	
	
	structField ::= annotations OptExportPrefix [Name "="] typeExpMut
	structConstructor ::= structField {fieldsep structField} [fieldsep]
	basicStruct ::= "{" [structConstructor] "}"
	
	
	traitExp ::= basicExp
		| traitExp "+" traitExp
	
	basicTypeExp ::= basicExp
		| "trait"
		| "dyn" traitExp
		| "impl" traitExp
		| "[" exp "]"
		| "?"
		| "struct" basicStruct
		| "union" basicStruct
		| "//" typeExp
		| typeunop {typeunop} typeExp {typepostunop}
		| basicTypeExp {typepostunop}
		| basicTypeExp binop typeExp
		| ["-"] Numeral
		| [safety] "fn" typeExp "->" typeExp
	
	typeExpMutBase ::= ["mut"] typeExp
	basicTypeExpMutBase ::= "mut" typeExp | basicTypeExp
	
	basicTypeExpMut ::= basicTypeExpMutBase
		| "//" typeExpMutBase
		| basicTypeExpMutBase binop typeExpMutBase
	
	typeExp ::= basicTypeExp
		| typeExp binop typeExp
		| basicStruct
		
	typeExpMut ::= typeExpMutBase
		| basicTypeExpMut
		| typeExpMut binop typeExpMut
	
	basicExp @::= | borrowLifetime | typeExpMut | traitExp
}

New Keywords {
	const
	mut
	trait
}

New types {

	trait
	type
	
	lifetime
	
	void
	bool
	integer
	fastnum
	NumVec
	Any
	str
	String
	Table
	Userdata
	
	f8
	f16
	f32
	f64
	f128
	
	i8
	i16
	i32
	i64
	i128
	isize
	
	u8
	u16
	u32
	u64
	u128
	usize
}

Official Types {

	(names starting with a capital are complex types)
	
	trait {
		Represents some trait as a value.
	}
	type {
		Represents some type as a value.
	}
	lifetime {
		Represents some lifetime as a value.
	}
	void {
		A unit, used as the default type.
	}
	bool {
		A boolean, either true or false
	}
	integer {
		A 25, 32, 64, or 54 bit integer
		54 bit integers are only for luajit, and older versions of lua (can store up to 2^53).
		25 bit integers are for 32bit versions of lua pre 5.3 (can store up to 2^24
		
		Slu types can be cast into this, any overflows are still errors.
		
		Platform specific, so on some very old platforms, might be 8 or 16 bit sized.
	}
	NumVec {
		a vector of numbers, ment for vectorial operations
		```
		const u8x4 = NumVec{4 of u8};
		--...
		let mulRes = 100 * u8x4{4,3,2,1};
		```
	}
	fastnum {
		A 32 or 64 bit float, might also be a integer on some lua versions.
		
		Slu types can be cast into this, any overflows are still errors.
	}
	
	Any {
		Any type is allowed, except void
	}
	str {
		A part of a owning string, immutable.
		
		a reference to a string of utf8 bytes, or utf16 chars.
		
		Must be valid utf16, with no malformed surrogate pairs, or valid utf8, using the old standard that allows charaters up to 32~ bits, without any surrogate pairs.
		
		On most hosts the contents are utf8, some hosts, like java & javascript use utf16.
	}
	String {
		A mutable string.
		
		Same restrictions on content as "str".
		
		Creating invalid content isnt ub in itself, but some libraries or functions will not handle that correctly.
	}
	Table {
		A lua like table, can have fields and indices
		Valid keys: any primitive type (Table,Func,String,uX,iX,fX,true/false,...), except void or NaN. 
		Yes, this also includes floats and negative numbers.
	}
	Userdata {
		Special data passed from the compiler
	}
	f8,f16,f128 {
		Reserved, may be used in the future.
		(intended for uses outside of simple hosts like lua, but will be supported inside them, when added)
	}
	f32,f64 {
		32 or 64 bit floats.
		
		Implementation {
			If f32/f64 is not natively supported, then it is emulated.
			If the native implementation has bugs, then it is also emulated.
		}
	}
	i8,i16,i32,i64,i128 {
		Optimized 8,16,32,64 or 128 bit signed integers.
		Implementation {
			i32, i64 may be emulated on platforms like luajit, or 32bit versions of lua.
			i128 is always emulated in lua.
		}
	}
	u8,u16,u32,u64,u128 {
		Optimized 8,16,32,64 or 128 bit unsigned integers.
		Implementation {
			u32, u64 may be emulated on platforms like luajit, or 32bit versions of lua.
			u64 multiplication, division, modulo, exp are all emulated on normal lua, (luajit might be optimized when possible).
			u128 is always emulated in lua.
		}
	}
	isize {
		i32, i48, i54, i64, ... depending on platform.
	}
	usize {
		u32, u48, u54, u64, ... depending on platform.
	}
}

Type Specifiers {
	
	Slice {
		Format: "[" X "]"
		
		Unlike table arrays, negative or zero indices will error.
		Out of bounds access will also error.
		
		Implementation {
			Accessing elements through normal lua code is not supported, unless exported to lua.
			
			multi-dimensional arrays must not be flattened into 1 dimension, unless sizes can be predicted at compile time.
			
			The compiler must prove that indices will always be valid, before removing run-time checks.
		}
	}
	Result {
		Format: [X] "//" X
		Format: [X] "?"
		
		Allows both a error, and a value, or just an error, and the value type is inferred.
		The type specifier '?' is just like '//', except the error type is inferred.
		When '?' is used alone, both the value and error type is inferred.
		
		Allows use of the "?" operator, and other error handling tools.
	}
	GC {
		Format: "#" ["mut"] X
		
		Turns the type into a gc-value, this means that it can be passed into other
		functions, and they can then modify that variable.
		It is also garbage collected, unless lifetime is simple enough to be inlined into some value type + borrows
		
		Passing this to other threads is not allowed if it is mutable, this means you cant store mutable gc-values in global variables.
		
		Borrowing these is allowed.
		
		Use the "alloc" unary operator, to create these.
	}
	Borrow {
		Format "&" {borrowLifetime} ["mut"] X
		
		Makes the type borrowing, this means that it is a borrowed value.
		
		```slu
		let item1 = 4
		let item2 = 5
		
		let &/item1 u8 myRef = &item1;
		
		let &mut u8 myRef2 = &mut item2;-- The annotation is inferred here.
		
		drop myRef2;-- Required, because not adding this, will produce a soft-error.
		
		let &/item1/item2 u8 z = &item1;-- This requires dropping "myRef2", as you cant have 2 variables potentially holding a reference to the same variable.
		
		```
	}
	Deref {
		Format X ".*"
		
		Represents a dereferenced borrow / ptr.
		
		```slu
		
		let intX = 4;
		
		let &mut u8.* xAlias = intX;
		xAlias = 3;
		drop xAlias; --Allow use of intX, once again
		
		assertEq$(intX,3);
		
		unsafe {
			let *mut u8.* xAliasUnsafe = (*mut intX).*;
			xAliasUnsafe = 2;
		}
		assertEq$(intX,2);
		
		
		let intXBorrow = &intX;
		
		let &/intX u8.* intXAlias = intXBorrow.*; --The type represents, a derefed reference for some u8 with lifetime "intX".
		let intXCopy = intXBorrow.*; --The type is just u8, as a trivial copy was possible.
		
		```
	}
	Pointer {
		Format "*" ("mut" | "const") X
		
		Makes the type a pointer.
		
		```slu
		let firstArg = 1;
		let secondArg = 2;
		
		
		--Its (mostly) safe to make pointers, but not to use them.
		--Some hosts dont support pointers. (Most do, like js,java,lua,cpp, ...)
		
		let *const u8 myPtr = *const firstArg;
		
		let *mut u8 myPtr2 = *mut secondArg;
		
		drop myPtr2;--Drops the pointer, not really meaningfull
		
	:::unsafe:
	
		let *mut u8 firstArgPtr = *mut firstArg;
		
		firstArgPtr = 4;
		
		```
	}
}