#
# Dependencies:
#

New Syntax {
	
	chunk ::= block

	block ::= {stat} [retstat [‘;’]]

	basicstat ::= ‘;’
		| varlist ‘=’ explist
		| functioncall
		| ‘break’
		| ‘goto’ Name

	stat ::=  basicstat
		| label
		| ‘{’ block ‘}’
		| ‘while’ basicExp statOrRet
		| ‘repeat’ statOrRetOsc ‘until’ exp
		| ‘for’ uncondDestrPat ‘=’ exp ‘,’ basicExp [‘,’ basicExp] statOrRet
		| ‘for’ uncondDestrPat ‘in’ basicExp statOrRet
		| ‘local’ uncondDestrPat [‘=’ explist]


	retstat ::= return [explist]


	basicstatOrRet ::= retstat | basicstat
	statOrRet ::= (basicstatOrRet ‘;’) | ‘{’ block ‘}’
	statOrRetNsc ::= basicstatOrRet | ‘{’ block ‘}’
	statOrRetOsc ::= statOrRet | statOrRetNsc
	
	

	label ::= ‘:::’ Name ‘:’

	funcname ::= Name {‘.’ Name} [‘:’ Name]

	varlist ::= var {‘,’ var}

	varbase ::= Name | ‘(’ exp ‘)’ subvar
	subvar ::= {args} (‘[’ exp ‘]’ | ‘.’ Name | ‘.*’)
	var ::= varbase {subvar}

	namelist ::= Name {‘,’ Name}

	explist ::= exp {‘,’ exp}

	basicExp ::=  Numeral | LiteralString | tableconstructor
		| prefixexpBfuncArgs | functioncallBasicArgs
		| basicExp binop basicExp | {unop} basicExp {postunop}
	
	exp ::=  basicExp
		| prefixexp | functioncall
		| exp binop exp | {unop} exp {postunop}

	prefixexp ::= var | ‘(’ exp ‘)’
	functioncall ::=  prefixexp args | prefixexp ‘:’ Name args 
	
	--Note: this var doesnt allow {} and "" style args.
	prefixexpBfuncArgs ::= var | functioncallBasicArgs | ‘(’ exp ‘)’
	functioncallBasicArgs ::=  prefixexpBfuncArgs basicargs | prefixexpBfuncArgs ‘:’ Name basicargs 

	basicargs ::=  ‘(’ [explist] ‘)’
	args ::=  basicargs | tableconstructor | LiteralString 

	tableconstructor ::= ‘{’ [fieldlist] ‘}’

	fieldlist ::= field {fieldsep field} [fieldsep]

	field ::= ‘[’ exp ‘]’ ‘=’ exp | Name ‘=’ exp | exp

	fieldsep ::= ‘,’ | ‘;’

	binop ::=  ‘+’ | ‘-’ | ‘*’ | ‘/’ | ‘//’ | ‘^’ | ‘%’
		| ‘&’ | ‘~’ | ‘|’ | ‘>>’ | ‘<<’ | ‘..’
		| ‘<’ | ‘<=’ | ‘>’ | ‘>=’ | ‘==’ | ‘!=’
		| ‘and’ | ‘or’

	unop ::= ‘-’ | ‘!’
	
	postunop ::=
}

New Keywords {
	and
	break
	do
	else
	false
	for
	function
	goto
	if
	in
	local
	nil
	not
	or
	repeat
	return
	true
	until
	while
}