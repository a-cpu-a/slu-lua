#
# Dependencies: Lua, type
#

New Syntax {
	
	statOrBasicExpr ::= (statOrRetOsc | "=>" basicExp)
	statOrExpr ::= (statOrRetOsc | "=>" exp)
	
	ifExpRoot ::= ifcond ["->" typeExp] [statOrExpr {‘else’ ifcond statOrExpr} ‘else’ [ifcond]]
	
	ifcond ::= ‘if’ basicExp
	
	
	ifExp ::= ifExpRoot statOrExpr
	ifExpBasic ::= ifExpRoot statOrBasicExpr
	
	basicExp @::= | ifExpBasic
	exp @::= | ifExp
	stat @::= | ifExp
}

New Keywords {
	if
	else
}

If Statement {
	
	Lets you check a bool value.
	
	TODO: should comptime be implicitly added where possible, or not?
	
	The return type is assigned automatically, if missing.
	When in expressions, the return type is not decayed into a value, unless explicitly set as such, or if one of the cases would return a value.
	```slu
	--Both y and z are dropped, due to the possibility that x is either value.
	drop if x => y else => z;
	
	--Since they dont decay unless needed, you can put the ref operator outside the if.
	let &/y/z selected = &(if x => y else => z)
	```
	
	```slu

	let x = if true -> 0...1 
				=> 0 
				else => 1

	if true => 100
	else if true => 100
	else if true => {1,2,3}
	else if true => {1,2,3}
	else if true => do {do return 100;}
	else if true => do {do return 100;}
	else if true {return 100;}
	else if true {return 100;}
	else if true print("Hello")
	else if true => print("Hello")
	else		 => do {print("Hello");}
	
	if true {} else if true {} else {}

	if true 
		return 1; 
	else if true 
		return 2; 
	else 
		return 3;

	```
	
	Implementation {
		May be a jump table, if else chain, etc.
	}
}