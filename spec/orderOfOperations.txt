#
# Dependencies: Lua
#

Order of Operations {
	
	--TODO: add compound operators for real
	
	--decide if wrap & sat operators should exist?
	--sat -> |
	--wrap -> & or %
	--location would be after, aka (+&, +|, <<|, <<&)
	
	```
	(pseudo) ;
	(pseudo) = ..= |= ~= &= <<= >>= += -= %= *= /= //= ^=
	(pseudo) ,

	unary operators (alloc)
	
	of
	
	.. (Not the same pos as lua!)
	
	or
	and
	!=	== (Not the same as lua!)
	
	<	>	<=	 >=
	
	... binary, post and prefix range operators
	
	|	~	&	(Not the same as lua! they are all equal)
	<<	 >>
	unary operators(dyn impl) --NOTE: "//" is actualy lower, when this operator is used!
	+	-
	% (Not the same as lua, modulus is bellow / * //)
	*	/	//
	unary operators (!	-	mut	  &    &mut	   *mut	   *const)
	^
	unary operators (*)
	postfix unary operator (?)
	
	(pseudo) .	 :	 ::	  function-args
	(pseudo) (parenthesis) [slicifier]
	```
	
	Everything is left to right, except for of, <<, >> and ^ which are right to left
	(unary operators are also right to left)
	
	
	
	Examples, where no difference exists, if you remove braces
	
	```slua
	
	
	true or (false and true)
	
	(!1) / (-1)
	1 / (-1)
	1 / (*(&x))
	1 / (!(*x))
	(*x) / 1
	(*(x?)) / 1
	(1 / (-1))...
	((1...) / 1)...
	(...((1...) / 1))...
	(...((x?)?))...
	(*(&(*(&(*(&((((x?)?)?)?)))))))...
	&(alloc (x ...))
	&(alloc ((...(x?))...))
	&(alloc (...(((x?)...) ^ 5)))
	&(alloc ((5 ^ (...(x?)))...))
	(1+1)...
	
	!(1 ^ (-1))
	1 ^ (-1)
	1 ^ (*(&x))
	1 ^ (!(*x))
	(*x) ^ 1
	(*(x?)) ^ 1
	(1 ^ (-1))...
	((1...) ^ 1)...
	(...(((1...) ^ 1))...
	
	((*(x?))...)
	!(x ^ 10)
	x^(y?)
	
	((1|2)|4) & x
	
	((1 ~ 8) | 4) & 2
	(((1 | 4) & 56) ~ 5)
	(((1 + 0x16) | 0x10) ~ 0x11)
	
	(1 + (1 % 1)) + 1
	1 + (1 % (100*100))
	(100 - (1 % 100)) + 1
	
	(1 < 3) and (3 > 5)

	(1 & 5) != 0

	(1 | 4) == 5

	((1 << 3) | (5 >> 4)) == 5


	("aaa" .. "444") .. (3 != y)

	(1 >> 4) .. "Hi!"


	(1 + 5) << 3


	"x==5: " .. (x == 5)

	...(1+1)
	
	(1+1)...
	
	1 ... (1+3)
	
	"Range: " .. (1 ... 4)

	"X: " .. (1 | 5)
	
	( f()? ) ^ ( f()? )
	
	
	
	```
	
}