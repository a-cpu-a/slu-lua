#
# Dependencies: Lua, comptime
#

New Syntax {

	annotations ::= {annotation}
	
	--Note: when parsing this before block like statements, expressions, etc, the tableconstructor is required to be present.
	-- INVALID: @Mark {return true}
	-- VALID: @Mark{} {return true}
	annotation ::= "@" comptimeVar [tableconstructor]
	
	
	stat @::= | annotations stat
	basicExp @::= | annotations basicExp
	exp @::= | annotations exp
}

Annotation {
	
	Allows adding info to stuff, for reflection, or compilation.
	
	There are some annotations that can change how code is compiled,
	or how code is exported, etc.
	Some annotations soft-error, when put on the wrong things, and thus are removed.
	
	The constructor arguments to annotations are optional, but in some cases you will need them, as not having them would conflict with other table constructors
	
	Any type can be used as a annotation, as long as it is marked with @Annotation.
	Using a type that isnt marked with @Annotation is a soft-error, and @Annotation is added for you.
	
	Annotations only exist at compile-time, so you cant access them from run-time code.
}

New Annotations {
	@Annotation{} - Marks a type as a annotation.
	
	Example:
	```slua
	@Annotation
	struct FuncMarker {}
	
	@FuncMarker
	function myFn() {}
	```
	
	
	@Builtin{info=string} - Allows for referencing some builtin value, type, etc.
	The string is a namespaced path to something. 
	A soft-error is produced, if the builtin doesnt exist, and the annotation is ignored.
	
	Example:
	```slua
	ex type Expr = @Builtin{"base::type/exp"}void;
	```
	
	
	@Cfg{onlyIf=bool} - Allows for conditional compilation based on a compile-time boolean expression.
	
	If the condition evaluates to `true`, the annotated code is included in the compilation.
	If the condition evaluates to `false`, the annotated code is **entirely omitted** from the compiled output.
	
	Example:
	```slua
	comptime let isDebug = true;
	
	@Cfg{onlyIf=isDebug}
	function debugPrint(msg) {
		print("[DEBUG] " .. msg);
	}
	
	@Cfg{not isDebug}
	function debugPrint(msg) {
		-- Debugging disabled, function is omitted at compile time
	}
	
	debugPrint("This will only exist if isDebug is true!");
	```

	@EntrypointInit{}
	Mark a variable, for runtime initialization inside a entrypoint.
	Only applicable to global variables.

	```
	@EntrypointInit
	let Mutex<String> state = Mutex{"Hello"};

	-- State is immutable, but the string inside of it isnt.
	-- This is safe, as the mutex stops any concurent accesses, and it is only initialized once, before any code runs.
	-- However, it should still be avoided, as it makes testing harder.
	-- "state" might be initialized inside main(), or some dll's main()
	-- The variable exists per dll / executable, so referencing it from other code that is dynamically linked is an compiler-error.
	```
}