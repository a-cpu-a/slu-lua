#
# Dependencies: Lua
#
Behaviour {
	
	Integer overflow or underflow must error, hex literals that overflow also need to do the same.
	Right shift is not allowed to underflow, if used on a signed type.
	Division by zero must error, when using floor division.
	It is an error, to overflow / underflow when casting.
	
	Any operations that produce one of the above, also need to error.
	
	Bit-shifting 0 is always valid.
	
	(This includes bit-shifting.)
	
	
	(-1>>1) --> error, as this is a unsigned right shift on a negative signed int.
	
	((1<<32)<<32) --> error, overflow
	(1<<64) --> same as above
	(1<<999) --> same as above
	
	(0<<999) --> no error, cuz nothing changed
	(0<<0) --> same as above
	
	(1>>32) --> no error, cuz output is 0
	(1>>64) --> same as above
	
	
	(1//0) --> error (already happens in normal lua)
	(1%0) --> error (already happens in normal lua)
	
	(1.5%0) --> no error, since one of the types is not a integer
	(1.5/0) --> no error, since one of the types is not a integer
	(1%0.0) --> no error, same as above
	(1/0.0) --> no error, same as above
	
	(0x7FFFFFFFFFFFFFFF_i64+1) --> error, since the integers are signed 64 bit (would be fine, if they were 128 bit)
	(1.0 + 0x7FFFFFFFFFFFFFFF_i64) --> no error, since one of the types is not a integer
	
	(-(-0x8000000000000000_i64)) --> error, due to integer overflow (there is no +9223372036854776028 integer)
	(-0x8000000000000000_i64*-1) --> error, same as above
	
	(0xF000000000000000F_i64) --> error, too big to fit in a 64 bit integer.
	
	
	--TODO: redo, with types in mind (i128 too)
	--And unified bit shifting in mind too.
	-- (1<<1) == (1>>-1)
	
	
	Implementation {
		
		The compiler is allowed to disable over/underflow checks when compiling for "release", or a flag is used
	}
}