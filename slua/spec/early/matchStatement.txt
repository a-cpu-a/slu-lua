#
# Dependencies: Lua, type, comptime
#

New Syntax {
	
	matchPatItem ::= ["#" | "not" | "-" | "~"] "(" comptimeExp ")" | ["-" | "~"] Numeral | ["#"] StringLiteral | ["not"] false | ["not"] true | ["not"] nil | type
	
	matchPatBinOp ::= "to" | "or"
	sPat ::= matchPatItem {matchPatBinOp matchPatItem}
	
	destrSpec ::= ["mut"] basicTypeOrTypePrefix
	
	
	destrField ::= "[" tupleableName "]" pat
	
	destrFieldUncond ::= "[" tupleableName "]" uncondDestrPat
	
	extraFieldSignifier ::= "," "..."
	
	
	
	destrFieldList ::= destrField {"," destrField} [extraFieldSignifier]
	destrTupFieldList ::= pat {"," pat} [extraFieldSignifier]
	
	dPat ::= destrSpec "{" destrFieldList "}" |
		destrSpec "{" destrTupFieldList "}" |
		destrSpec "[" destrTupFieldList "]" |
		
		"of" ["mut"] type "[" destrTupFieldList "]" |
		
		destrSpec Name ["=" ndPat] |
		"_"
		
		
	uncondDestrFieldList ::= destrFieldUncond {"," destrFieldUncond} [extraFieldSignifier]
	uncondDestrTupFieldList ::= uncondDestrPat {"," uncondDestrPat} [extraFieldSignifier]
	
	uncondDestrPat ::= destrSpec "{" uncondDestrFieldList "}" |
		destrSpec "{" uncondDestrTupFieldList "}" |
		destrSpec "[" uncondDestrTupFieldList "]" |
		
		"of" ["mut"] type "[" uncondDestrTupFieldList "]" |
		
		destrSpec Name |
		"_"
	
	ndPat ::= sPat
	pat ::= sPat | dPat
	patNoNpfList ::= sPat | dPatNoNpfList
	
	matchItem ::= "case" pat ["if" exp] "=>" explist
	matchElseItem ::= "else" ["if" exp] "=>" explist
	matchStat ::= matchItem | matchElseItem | ";"
	
	matchExp ::= "match" "(" exp ")" ["->" errType] "{" {matchStat} "}"
	
	exp @::= | matchExp
	stat @::= | matchExp
}

New Keywords {
	match
	as
	of
	case
	to
}

Match Statement {
	
	Lets you match on a expressions result.
	
	The return type is assigned automatically, if missing.
	
	First matching pattern will be used. (top to bottom)
	The order inside the patterns is undefined.
	
	Match statments must always handle all inputs.
	If some inputs wouldnt match, then a soft-error occurs, and a " else => panic$(); " is inserted.
	It is an soft-error to have multiple cases that are identical, without any if checks.
	
	
	"extraFieldSignifier" is required, when a field / array element is ignored, or when matching on dynamicaly-sized arrays.
	
	Implementation {
		May be a jump table, if else chain, etc.
	}
}