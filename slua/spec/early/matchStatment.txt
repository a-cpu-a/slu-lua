#
# Dependencies: Lua, type, comptime
#

New Syntax {
	
	--TODO: finish this:
	matchPatItem ::= {unop} 
		("(" comptimeExp ")" | Numeral | StringLiteral | false | true | nil)
	
	matchPatBinOp ::= ".." | "or"
	rangeishCasing ::= matchPatItem {matchPatBinOp matchPatItem}
	
	namedField ::= (optTypeOrRefMut Name ["=" matchCasing]) | "_"
	
	patField ::= ["&"] ["mut"] tupleableName ["=" matchCasing]
	tableishCasing ::= type "{" patField {fieldsep patField} [fieldsep ".."] "}"
	arrayishCasing ::= "[" namedField {"," namedField} ["," ".."] "]"
	
	matchCasing ::= tableishCasing | arrayishCasing | rangeishCasing | "_"
	matchPatCasing ::= tableishCasing | arrayishCasing | ([optTypeOrRefMut Name "="] rangeishCasing)
	
	
	matchPat ::= matchPatCasing ["if" exp]
	
	matchItem ::= ("_" | type | matchPat) "=>" explist
	
	matchStat ::= matchItem | ";"
	
	matchExp ::= "match" exp ["->" type] {matchStat} "end"
	
	exp @::= | matchExp
	stat @::= | matchExp
}

New Keywords {
	match
}

Match Statment {
	
	Lets you match on a expressions result.
	
	The return type is assigned automatically, if missing.
	
	First matching pattern will be used. (top to bottom)
	
	The order inside the patterns is undefined.
	
	Implementation {
		May be a jump table, if else chain, etc.
	}
}