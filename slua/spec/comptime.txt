#
# Dependencies: Lua, fnStatment, letStatment, constStatment, modules
# MayModify: constStatmentTypes, letStatmentTypes, fnExpression
#

New Syntax {

	PreFn ::= ["comptime"]
	PreLet ::= ["comptime"]
	PreConst ::= ["comptime"]
	
	comptimeExp ::= exp
	comptimeVar ::= modpath {"." tupleableName}
	comptimeVarType ::= comptimeVar
	comptimeFunccall ::= comptimeVar [":" tupleableName] args
	
	exp @::= | comptime(exp)
}

New Keywords {
	comptime
}

Comptime Keyword {
	
	This can mark something to only run at compile-time.
	
	It can be used on a expression to make it run a compile-time,
	this means you can speed up things like string concatentation,
	it will error, if the expression uses something from the runtime.
	
	It can mark a function, or variable as compile-time evaluated.
	
	Using comptime on global variables lets you initialize the values at compile-time.
	On functions, it means that they must be executed at compile-time.
	
	Using comptime on a "let" local variable, forces the initial value to be stored in some private global state.
	When using it on "const" local variables, the variables might be moved over to some private global state.
	
	
	comptimeExp,comptimeFunccall -> must be runnable at compile-time
	comptimeVar -> value must be known at compile-time
	comptimeVarType -> only basic type paths allowed
	
	(comptime(exp)) can be used to force a expression to be run at compile-time
	
	
	When there is a panic, or a error is propagated outside of comptime, a compiler error must be issued.
	
	For now, comptime code isnt allowed to write to comptime global variables.
	
	Implementation {
		Likely just compile the needed functions, variables, constants, types into some lua_state, then run it.
		And then cache the results, until something changes.
		
		Dangerous libraries like "debug", "io", "os" are disabled inside comptime.
		
		note: (All normal functions can be evaluated at compile-time and run-time)
	}
}