#
# Dependencies: Lua, fnStatment, letStatment, constStatment, modules
# MayModify: constStatmentTypes, letStatmentTypes
#

New Syntax {

	PreFn ::= ["comptime"]
	PreLet ::= ["comptime"]
	PreConst ::= ["comptime"]
	
	comptimeExp ::= exp
	comptimeVar ::= modpath {"." tupleableName}
	comptimeFunccall ::= comptimeVar [":" tupleableName] args
	
	exp @::= | comptime(exp)
}

New Keywords {
	comptime
}

Comptime Keyword {
	
	This can mark something, or make a expression run at compile-time.
	
	It can be used on a expression to make it run a compile-time,
	this means you can speed up things like string concatentation,
	it will error, if the expression uses something from the runtime.
	
	It can mark a function, or variable as compile-time evaluated.
	
	This means that the variable must have its value computed at compile-time.
	Or that the function must be executed at compile-time.
	
	comptimeExp,comptimeFunccall -> must be runnable at compile-time
	comptimeVar -> value must be known at compile-time
	
	
	comptime(exp) can be used to force the expression to be run at compile-time
	
	Implementation {
		Likely just compile the needed functions, variables, constants, types into some lua_state, to run the stuff.
		And then cache the results, until something changes.
		
		note: (Normal functions can be evaluated at compile-time, or run-time)
	}
}