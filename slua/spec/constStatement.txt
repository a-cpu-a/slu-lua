#
# Dependencies: Lua, type, exportPrefix
#

New Syntax {
	
	stat @::= | OptExportPrefix ["newtype"] "const" uncondDestrPat ["=" explist]
}

New Keywords {
	const
	newtype
}

Const Statement {
	
	Creates new global or local variable(s) with names, that cant be modified (not even its contents).
	
	Types are assigned automatically, when needed.

	These variables are automatically marked with comptime, using comptime is an parse error.
	
	If the "newtype" tag is added, then this variable makes a nominal/strong type.
	
	
	Unlike 'let', 'const' variables are available in any order, and dont have to be in top-to-bottom order.
	
	```slua
	
	let VecU8 hi = {1,2,3}; --Valid, since 'VecU8' is a const variable 
	
	newtype const VecU8 = Vec(u8);
	
	const Y = X+1; -- Valid, unlike for let.
	const X = 0;
	```
	
	
	Implementation {
		May be a local ?<const>? variable
		Or a global variable
		
		Possibly, equivelant to "local x = 1234", or "x = 1234", except, it can be exported.
		And if x is a table / whatever, its contents cant be edited, unless mut is added.
		
		The value might be frozen at runtime (metatable, or internal stuff)
		
		If something somehow modifies a const variable, the changes might be ignored.
	}
}