#
# Dependencies:
#

New Syntax {

	chunk ::= block

	block ::= {stat} [retstat [‘;’]]

	stat ::=  ‘;’ | 
		 varlist ‘=’ explist | 
		 functioncall | 
		 label | 
		 ‘break’ | 
		 ‘goto’ Name | 
		 ‘{’ block ‘}’ | 
		 ‘while’ ‘(’ exp ‘)’ statOrRet | 
		 ‘repeat’ statOrRet ‘until’ exp | 
		 ‘if’ ‘(’ exp ‘)’ statOrRet [‘else’ statOrRet] | 
		 ‘for’ ‘(’ Name ‘=’ exp ‘,’ exp [‘,’ exp] ‘)’ statOrRet | 
		 ‘for’ ‘(’ namelist ‘in’ explist ‘)’ statOrRet | 
		 ‘function’ funcname funcbody | 
		 ‘local’ ‘function’ Name funcbody | 
		 ‘local’ attnamelist [‘=’ explist]

	attnamelist ::=  Name attrib {‘,’ Name attrib}

	attrib ::= [‘<’ Name ‘>’]

	retstat ::= return [explist]

	retstatSemi ::= retstat ‘;’
	statOrRet ::= retstatSemi | stat

	label ::= ‘::’ Name ‘::’

	funcname ::= Name {‘.’ Name} [‘:’ Name]

	varlist ::= var {‘,’ var}

	var ::=  Name | prefixexp ‘[’ exp ‘]’ | prefixexp ‘.’ Name 

	namelist ::= Name {‘,’ Name}

	explist ::= exp {‘,’ exp}

	exp ::=  ‘nil’ | ‘false’ | ‘true’ | Numeral | LiteralString | ‘...’ | functiondef | 
		 prefixexp | tableconstructor | exp binop exp | unop exp 

	prefixexp ::= var | functioncall | ‘(’ exp ‘)’

	functioncall ::=  prefixexp args | prefixexp ‘:’ Name args 

	args ::=  ‘(’ [explist] ‘)’ | tableconstructor | LiteralString 

	functiondef ::= ‘function’ funcbody

	funcbody ::= ‘(’ [parlist] ‘)’ ‘{’ block ‘}’

	parlist ::= namelist [‘,’ ‘...’] | ‘...’

	tableconstructor ::= ‘{’ [fieldlist] ‘}’

	fieldlist ::= field {fieldsep field} [fieldsep]

	field ::= ‘[’ exp ‘]’ ‘=’ exp | Name ‘=’ exp | exp

	fieldsep ::= ‘,’ | ‘;’

	binop ::=  ‘+’ | ‘-’ | ‘*’ | ‘/’ | ‘//’ | ‘^’ | ‘%’ | 
		 ‘&’ | ‘~’ | ‘|’ | ‘>>’ | ‘<<’ | ‘..’ | 
		 ‘<’ | ‘<=’ | ‘>’ | ‘>=’ | ‘==’ | ‘~=’ | 
		 ‘and’ | ‘or’

	unop ::= ‘-’ | ‘not’ | ‘#’ | ‘~’
}

New Keywords {
	and
	break
	do
	else
	false
	for
	function
	goto
	if
	in
	local
	nil
	not
	or
	repeat
	return
	true
	until
	while
}