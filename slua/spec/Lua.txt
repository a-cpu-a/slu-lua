#
# Dependencies:
#

New Syntax {
	
	--TODO: revise advanced for loop syntax
	
	chunk ::= block

	block ::= {stat} [retstat [‘;’]]

	basicstat ::= ‘;’ | 
		 varlist ‘=’ explist | 
		 functioncall | 
		 ‘break’ | 
		 ‘goto’ Name

	stat ::=  basicstat | 
		 label | 
		 ‘{’ block ‘}’ | 
		 ‘while’ ‘(’ exp ‘)’ statOrRet | 
		 ‘repeat’ statOrRetOsc ‘until’ exp | 
		 ifcond [statOrRetOsc {‘else’ ifcond statOrRetOsc} ‘else’ [ifcond]] statOrRet | 
		 ‘for’ Name ‘in’ ‘(’ exp [‘,’ exp] ‘)’ statOrRet | 
		 ‘for’ ‘(’ namelist ‘in’ explist ‘)’ statOrRet | 
		 ‘local’ namelist [‘=’ explist]


	retstat ::= return [explist]

	ifcond ::= ‘if’ ‘(’ exp ‘)’

	basicstatOrRet ::= retstat | basicstat
	statOrRet ::= (basicstatOrRet ‘;’) | ‘{’ block ‘}’
	statOrRetOsc ::= (basicstatOrRet [‘;’]) | ‘{’ block ‘}’

	label ::= ‘:::’ Name ‘:’

	funcname ::= Name {‘.’ Name} [‘:’ Name]

	varlist ::= var {‘,’ var}

	varbase ::= [‘*’] Name | ‘(’ exp ‘)’ subvar | ‘*’ ‘(’ exp ‘)’
	subvar ::= {args} (‘[’ exp ‘]’ | ‘.’ Name)
	var ::= varbase {subvar}

	namelist ::= Name {‘,’ Name}

	explist ::= exp {‘,’ exp}

	exp ::=  ‘nil’ | ‘false’ | ‘true’ | Numeral | LiteralString | 
		 prefixexp | tableconstructor | exp binop exp | unop exp 

	prefixexp ::= var | functioncall | ‘(’ exp ‘)’

	functioncall ::=  prefixexp args | prefixexp ‘:’ Name args 

	args ::=  ‘(’ [explist] ‘)’ | tableconstructor | LiteralString 

	tableconstructor ::= ‘{’ [fieldlist] ‘}’

	fieldlist ::= field {fieldsep field} [fieldsep]

	field ::= ‘[’ exp ‘]’ ‘=’ exp | Name ‘=’ exp | exp

	fieldsep ::= ‘,’ | ‘;’

	binop ::=  ‘+’ | ‘-’ | ‘*’ | ‘/’ | ‘//’ | ‘^’ | ‘%’ | 
		 ‘&’ | ‘~’ | ‘|’ | ‘>>’ | ‘<<’ | ‘..’ | 
		 ‘<’ | ‘<=’ | ‘>’ | ‘>=’ | ‘==’ | ‘!=’ | 
		 ‘and’ | ‘or’

	unop ::= ‘-’ | ‘!’ | ‘#’ | ‘~’
	
	postunop ::=
}

New Keywords {
	and
	break
	do
	else
	false
	for
	function
	goto
	if
	in
	local
	nil
	not
	or
	repeat
	return
	true
	until
	while
}