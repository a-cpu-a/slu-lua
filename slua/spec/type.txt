#
# Dependencies: Lua
#

New Syntax {

	type ::= typeItem ["?" typeItem] { "|" typeItem }
	TypeList ::= type {"," type}

	typeItem ::= typePrefix specType
	specType ::= typeObj | "(" type ")"
	
	typeObj ::= Name | dynamicArrayType | tupleType
	
	tupleType ::= tableTupleType | optimalArrayType
	
	tableTupleType ::= "{" TypeList "}"
	dynamicArrayType ::= "[" type "]"
	optimalArrayType ::= "[" type arraySizer {arraySizer} "]"
	
	
	arraySizer ::= ";" comptimeExp

	typePrefix ::= ["#"] ["&" ["mut"] {borrowAnnotation}]
	
	optTypeOrRefMut ::= (["&"] ["mut"]) | type
	
	borrowAnnotation ::= "/" var
	
	typedParam ::= ["mut"] [type] Name
	TypedParamList ::= typedParam {"," typedParam}
	
	typedVarArg ::= ["mut"] [type] "..."
	typedParamsVarArg ::= TypedParamList ["," typedVarArg]
	TypedParamListVarArg ::= [typedParamsVarArg | typedVarArg]
	
	macroParam ::= ["macro"] typedParam
	
	macroParamSep ::= "," | ";"
	macroParamList ::= macroParam {macroParamSep macroParam}
	
	tupleableName ::= Name | Integral
}

New Keywords {
	void
	bool
	o_int
	o_num
	ptrdata
	Any
	string
	Table
	Func
	Userdata
	Thread
	
	f8
	f16
	f32
	f64
	f128
	
	i8
	i16
	i32
	i64
	i128
	isize
	
	u8
	u16
	u32
	u64
	u128
	usize
}

Official Types {

	(names starting with a capital are complex types)

	void {
		Nothing, no type is allowed.
		Variables and function arguments cant have this type.
		Only allowed as function return type.
	}
	bool {
		A lua boolean
	}
	o_int {
		A 25, 32, 64, or 54 bit integer
		54 bit integers are only for luajit (can store up to 2^53).
		25 bit integers are for 32bit versions of lua pre 5.3 (can store up to 2^24)
		
		name is prefixed with "o_", cuz this is optimized for speed
		
		--[[
			Should slua types be allowed here? u128, i128 too?
		]]
	}
	o_num {
		A 32 or 64 bit float, might also be a o_int on some lua versions.
		
		name is prefixed with "o_", cuz this is optimized for speed
		
		--[[
			Should slua types be allowed here? u128, i128 too?
		]]
	}
	ptrdata {
		Lightdata passed from C
	}
	
	Any {
		Any type is allowed (even void)
	}
	String {
		A lua string, immutable
	}
	Table {
		A lua table, can have fields and indices
	}
	Func {
		Any function C, lua, etc
	}
	Userdata {
		Things passed from C
	}
	Thread {
		The coroutines
	}
	f8,f16,f128 {
		Reserved, may be used in the future.
		(intended for uses outside of lua, but will be supported inside lua, when added)
	}
	f32,f64 {
		32 or 64 bit floats.
		
		Implementation {
			When compiling to lua, f32 may be interpreted as f64, for performance reasons.
			Do not rely on that!
			
			if only f32 is natively available, then f64 is emulated.
		}
	}
	i8,i16,i32,i64,i128 {
		Optimized 8,16,32,64 or 128 bit signed integers.
		Implementation {
			i64 may be emulated on platforms like luajit, or 32bit versions of lua.
			i128 is always emulated in lua.
		}
	}
	u8,u16,u32,u64,u128 {
		Optimized 8,16,32,64 or 128 bit unsigned integers.
		Implementation {
			u64 may be emulated on platforms like luajit, or 32bit versions of lua.
			u64 multiplication, division, modulo, exp are all emulated on normal lua, but are optimized on slua runtimes (luajit might be optimized when possible too).
			u128 is always emulated in lua.
		}
	}
	isize {
		i32, i54, i64, ... depending on platform.
	}
	usize {
		u32, u54, u64, ... depending on platform.
	}
}

Type Specifiers {
	
	Table Array {
		Format: "[" X arraySizer {arraySizer} "]"
		Sizes must be positive integers, or be zero
		
		Multiple array sizers can be used, to create multi-dimensional arrays
		
		Unlike table arrays, negative or zero indices will error.
		Out of bounds access will also error.
		
		Indices start at 1
		
		Implementation {
			Accessing elements through normal lua code is not supported.
			
			multi-dimensional arrays may be flattened into 1 dimension.
			
			The compiler must prove that indices will always be valid, to remove run-time checks.
		}
	}
	Dynamic Array {
		Format: "[" X "]"
		Sizes: same as table
		
		Unlike table arrays, negative or zero indices will error.
		Out of bounds access will also error.
		
		Implementation {
			Accessing elements through normal lua code is not supported.
			
			multi-dimensional arrays must not be flattened into 1 dimension, unless sizes can be predicted at compile time.
			
			The compiler must prove that indices will always be valid, to remove run-time checks.
		}
	}
	Result {
		Format: [X] "?" X
		
		Allows both a error, and a value, or just a error.
		
		Allows use of the "?" operator, and other error handling tools.
	}
	GC {
		Format: "#" X
		
		Turns the type into a gc-value, this means that it can be passed into other
		functions, and they can then modify that variable.
		It is also garbage collected, unless lifetime is simple enough to be inlined into some value type + borrows
		
		Passing this to other threads is not allowed, this means you cant store gc-values in global variables.
		
		Mutably-borrowing these is also not allowed.
	}
	Borrow {
		Format "&" ["mut"] X {borrowAnnotation}
		
		Makes the type borrowing, this means that it is a borrowed value.
		
		(&u8/firstArg/secondArg) -> a reference to a "u8", equivelant to using either firstArg, or secondArg.
	}
}