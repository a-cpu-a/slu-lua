#
# Dependencies: Lua, comptime, modules
#

New Syntax {
	
	trait ::= modpath
	traitcombo ::= trait {"+" trait}
	
	errType ::= ([type] "?" type) | ([type] "??" ) | type
	
	type ::= typeItemlist
	TypeList ::= type {"," type}

	typeItemlist ::= typeItem { "|" typeItem }
	typeItem ::= typePrefix [typeObj]
	
	typeObj ::= comptimeVarType | arraySliceType | optimalArrayType | tableTupleType | traitComboType | "(" type ")"
	
	basicTypeItm ::= typePrefix [comptimeVarType | traitComboType]
	
	traitComboType ::= ("dyn" | "impl") traitcombo
	
	tableTupleType ::= "{" TypeList "}"
	arraySliceType ::= "[" type "]"
	optimalArrayType ::= "[" type arraySizer "]"
	
	
	arraySizer ::= ";" comptimeExp

	typePrefix ::= ["#"] {["&" ["mut"] {borrowLifetime}]}
	
	borrowLifetime ::= "/" var
	
	typedParam ::= destrTupFieldUncond
	TypedParamList ::= typedParam {"," typedParam}
	
	macroParam ::= ["macro"] typedParam
	
	macroParamSep ::= "," | ";"
	macroParamList ::= macroParam {macroParamSep macroParam}
	
	tupleableName ::= Name | Integral
}

New Keywords {
	void
	bool
	integer
	number
	ptrdata
	Any
	str
	String
	Table
	Func
	Userdata
	Thread
	
	f8
	f16
	f32
	f64
	f128
	
	i8
	i16
	i32
	i64
	i128
	isize
	
	u8
	u16
	u32
	u64
	u128
	usize
}

Official Types {

	(names starting with a capital are complex types)

	void {
		Nothing, no type is allowed.
		Variables and function arguments cant have this type.
		Only allowed as function return type.
	}
	bool {
		A lua boolean
	}
	integer {
		A 25, 32, 64, or 54 bit integer
		54 bit integers are only for luajit, and older versions of lua (can store up to 2^53).
		25 bit integers are for 32bit versions of lua pre 5.3 (can store up to 2^24
		
		Slua types can be cast into this, any overflows are still handled.
		
		Platform specific, so on some very old platforms, might be 8 or 16 bit sized.
	}
	number {
		A 32 or 64 bit float, might also be a integer on some lua versions.
		
		Slua types can be cast into this, any overflows are still handled.
	}
	ptrdata {
		Lightdata passed from C
	}
	
	Any {
		Any type is allowed, except void
	}
	str {
		A lua-like string, immutable.
		Unlike lua, this is just a reference to a real string, or part of one.
		
		a sized array of utf8 bytes, or utf16 chars.
		
		Must be valid utf8, using the old standard that allows charaters up to 32~ bits, and without any surrogate pairs.
		Or valid utf16, with no malformed surrogate pairs.
		
		On most platforms the contents are utf8.
		
		Some platforms, like java & javascript use utf16.
	}
	String {
		A mutable string.
		
		Same restrictions on content as "str".
		
		Creating invalid content isnt ub in itself, but some libraries or functions will not handle that correctly.
	}
	Table {
		A lua like table, can have fields and indices
		Valid keys: any lua type, except nil or NaN. Yes, this also includes floats and negative numbers.
	}
	Func {
		Any function C, lua, etc
	}
	Userdata {
		Things passed from C
	}
	Thread {
		The coroutines
	}
	f8,f16,f128 {
		Reserved, may be used in the future.
		(intended for uses outside of lua, but will be supported inside lua, when added)
	}
	f32,f64 {
		32 or 64 bit floats.
		
		Implementation {
			When compiling to lua, f32 may be interpreted as f64, for performance reasons.
			Do not rely on that!
			
			if only f32 is natively available, then f64 is emulated.
		}
	}
	i8,i16,i32,i64,i128 {
		Optimized 8,16,32,64 or 128 bit signed integers.
		Implementation {
			i32, i64 may be emulated on platforms like luajit, or 32bit versions of lua.
			i128 is always emulated in lua.
		}
	}
	u8,u16,u32,u64,u128 {
		Optimized 8,16,32,64 or 128 bit unsigned integers.
		Implementation {
			u32, u64 may be emulated on platforms like luajit, or 32bit versions of lua.
			u64 multiplication, division, modulo, exp are all emulated on normal lua, but are optimized on slua runtimes (luajit might be optimized when possible too).
			u128 is always emulated in lua.
		}
	}
	isize {
		i32, i54, i64, ... depending on platform.
	}
	usize {
		u32, u54, u64, ... depending on platform.
	}
}

Type Specifiers {
	
	Array {
		Format: "[" X arraySizer "]"  --TODO: should this exist: {arraySizer}
		Sizes must be positive integers, or be zero
		
		Multiple array sizers can be used, to create multi-dimensional arrays
		
		Unlike table arrays, negative or zero indices will error.
		Out of bounds access will also error.
		
		Indices start at 1
		
		Implementation {
			Accessing elements through normal lua code is not supported, unless exported to lua.
			
			multi-dimensional arrays may be flattened into less dimensions.
			
			The compiler must prove that indices will always be valid, before removing run-time checks.
		}
	}
	Slice {
		Format: "[" X "]"
		
		Unlike table arrays, negative or zero indices will error.
		Out of bounds access will also error.
		
		Implementation {
			Accessing elements through normal lua code is not supported, unless exported to lua.
			
			multi-dimensional arrays must not be flattened into 1 dimension, unless sizes can be predicted at compile time.
			
			The compiler must prove that indices will always be valid, before removing run-time checks.
		}
	}
	Result {
		Format: [X] "?" X
		Format: [X] "??"
		
		Allows both a error, and a value, or just an error, and the value type is inferred.
		The type specifier '??' is just like '?', except the error type is inferred.
		
		Allows use of the "?" operator, and other error handling tools.
	}
	GC {
		Format: "#" X
		
		Turns the type into a gc-value, this means that it can be passed into other
		functions, and they can then modify that variable.
		It is also garbage collected, unless lifetime is simple enough to be inlined into some value type + borrows
		
		Passing this to other threads is not allowed, this means you cant store gc-values in global variables.
		
		Borrowing these is also not allowed.
		
		Use the "alloc" unary operator, to create these.
	}
	Borrow {
		Format "&" {borrowLifetime} ["mut"] X
		
		Makes the type borrowing, this means that it is a borrowed value.
		
		```slua
		let firstArg = --...
		let secondArg = --...
		
		let &u8/firstArg myRef = &firstArg;
		
		let &mut u8 myRef2 = &mut secondArg;-- The annotation is inferred here.
		
		drop myRef2;-- Required, because not adding this, will produce a soft-error.
		
		let &u8/firstArg/secondArg = &firstArg;-- This requires dropping "myRef2", as you cant have 2 variables potentially holding a reference to the same variable.
		
		```
	}
}