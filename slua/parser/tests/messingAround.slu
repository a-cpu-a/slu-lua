
let _ = 3;
let [u8;4] __b__ = [1;4];
let [u8;44] _c = [1;44];
let [u8] [__a,__,_c_] = {1,2,3}
let [u8] [_a,_,c_,..] = {1,2,3}

let U8arr1 bbb = {1};
let u8 bb = 1;
let &&mut u8 x3 = &&mut bb;

let as{integer,{number}} xp = -0xFFFFFFFFFFFFFFFF,{0xFFFFFFFFFFFFFFFF};
let as{integer,number} xd = -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;
let [u8] {x7,y7,z8} = {0,0xF,0xFFFFFFFF};

let integer x = 4;

let {x4,y6} = 1,2.0;
let {x5,y7} = 1,{2.0};

	
	:::xax:
	
goto xax

	:::xax2: :::xax5:
	
goto xax2

	:::xax3:

let Vec3{|3|xv3,|2|yv2,|1|zv1} = Vec3{11,-0x7FFFFFFFFFFFFFFF,0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF};
let {|1|xV1,|2|yV2,|3|zV3} = Vec3{11,-0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,11};
let Vec3{xa0,ya1,za2} = Vec3{0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,11,11};
let {xA3,yA2,zA1} = Vec3{11,0x7FFFFFFFFFFFFFFF,0xFFFFFFFFFFFFFFFF};

let {x,y,z} = 1;

let [u8] {__aa, ..} = {1,2,3};

let {aa_N3,b_N3,c_N3} = {1,2,3};

let U8arr3 {aa_U8arr3_,b_U8arr3,c_U8arr3} = {1,2,3};

let mut &mut _TnTObj{
	|__t| mut &mut a44__,
	|n_| b44,
	|_t2_| mut BTn___{
		|t__| a221,
		|n_| b221
	},
	|___n2| mut {
		|_t| ax2x,
		|__n| _b2z
	},
	..
} = __getTnT_Obj();


let mut &mut TnT{
	mut &mut {
		aa,
		b3
	},
	b,
	mut Tn{
		a2,
		b2
	},
	..
} = getTnT();

let mut &mut TnTArr{
	mut &mut {
		u32 aa,
		u64 b3
	},
	b,
	mut Tn{
		|t| [u128] a2,
		|n| [u8;34] b2,
		..
	},
	_,
	d24,
	..
} = getTnT();



let mut &mut _TnTArr{
	mut &mut {
		_a0a,
		b_3
	},
	b_,
	mut T_n{
		|t| a26,
		|n| b2Xz
	},
	_,
	d24__,
	..
} = getTnT_();


let mut &mut TnTArr4{
	mut &mut _aa,
	{b_4,b3_4,c4_4, ..},
	mut Tn_4{
		|t_4| a2_4,
		|n4_| b2_4
	},
	mut {
		|t| a2_45,
		|n| b2_45
	},
	..
} = getTnT_4();


let mut &mut TnTArr_99{
	mut &mut {
		aa_99,
		b3_99
	},
	b_99,
	mut Tn{
		a2_99,
		b2_99
	},
	_,
	d24_99,
	..
} = getTnT_99();


let #u8 zGC = 4;
let #u8 wGC = alloc 4;



let x_test = NoTrivialCopy{4};
let mut v_test = Vec{};

v_test.add(copy x_test);
let mut w_test = copy *x_test;
v_test.add(copy v_test[0]);

v_test.add(x_test); 	--moves x_test out
w_test = x_test; --Error, x_test has no value!
v_test.add(v_test[0]); --Error, self and arg are of the same object/lifetime thing.


let Z_test = Some{3}; --Option<integer>

--Z_test is Option(integer)::Some;

Z_test = None;

--Z_test is Option(integer)::None;


mod self;

--range op spec

	let range = 1...4;
	let rangeAbove = 1...;
	let rangeBelow = ...5;
	
--todo spec


		fn prefixUpperify(str prefix,mut String s) -> String {
			if (#s == 0) return s;
			s[1] = s[1].upper()
			return prefix..s;
		}

--type spec

--borrow

		let item1 = 4
		let item2 = 5
		
		let &/item1 u8 myRef = &item1;
		
		let &mut u8 myRef2 = &mut item2;-- The annotation is inferred here.
		
		drop myRef2;-- Required, because not adding this, will produce a soft-error.
		
		let &/item1/item2 u8 z = &item1;-- This requires dropping "myRef2", as you cant have 2 variables potentially holding a reference to the same variable.
		

--deref


		let intX = 4;
		
		let *&mut u8 xAlias = intX;
		xAlias = 3;
		drop xAlias; --Allow use of intX, once again
		
		--assertEq$(intX,3);
		
		let **mut u8 xAliasUnsafe = *mut intX;
		
		unsafe {
			xAliasUnsafe = 2;
		}
		assertEq$(intX,2);
		
		
		let intXBorrow = &intX;
		
		let *&/intX u8 intXAlias = *intXBorrow; --The type represents, a derefed reference for some u8 with lifetime "intX".
		let intXCopy = *intXBorrow; --The type is just u8, as a trivial copy was possible.
		
--ptr
		let firstArg = 1
		let secondArg = 2
		
		
		--Its (mostly) safe to make pointers, but not to use them.
		--Some hosts dont support pointers. (Most do, like js,java,lua,cpp, ...)
		
		let *const u8 myPtr = *const firstArg;
		
		let *mut u8 myPtr2 = *mut secondArg;
		
		drop myPtr2;--Drops the pointer, not really meaningfull
		
		let *mut u8 firstArgPtr = *mut firstArg;
		
	:::unsafe:
		
		firstArgPtr = 4;

for u8 i in (1...100) {}
for u8 i in (1...100,10) {}
for u8 i in (getRange(),getStep()) {}

for {i,v} in (getVec()) {}
for {k,_} in (myVec(),1...100) {}
for KvPair{k,v} in (getIter(),getArg()) {}


struct Qu {
	mut u32 x;
	mut u32 y;
	mut u32 z;
};
struct Qu2 {
	mut u32,
	mut u32,
	mut u32;
	x = mut u32;
	y = mut u32;
	z = mut u32;
};


newtype const Qu3 = {
	x = mut u32;
	y = mut u32;
	z = mut u32;
}

const trait BasicMathOps = Add + Sub + Mul + Div;
